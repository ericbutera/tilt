load('ext://restart_process', 'docker_build_with_restart')

GO_DEPS = ['./cmd', './pkg','./tools','./internal']

DOCKERFILE = """
FROM alpine
WORKDIR /app
ADD bin bin
ENTRYPOINT /app/bin/app
"""

def go_compile(name, dir, deps):
  """
  Compiles a Go binary in the given directory.
  """
  local_resource(
    name,
    "CGO_ENABLED=0 GOOS=linux go build -o bin/app",
    dir=dir,
    ignore=['**/bin'],
    deps=GO_DEPS + deps,
    labels=['compile'],
    allow_parallel=True,
  )

def go_image(name, dir):
  """
  Builds a Docker image with the Go binary in the given directory.
  """
  docker_build_with_restart(
    name + '-image',
    dir,
    entrypoint=['/app/bin/app'],
    only=['./bin'],
    live_update=[sync(dir + '/bin', '/app/bin')],
    dockerfile_contents=DOCKERFILE,
  )

def go_service(name, port_forwards=[], resource_deps=[], env_vars={}):
  deployment_yaml = go_deployment_yaml(name, env_vars=env_vars)
  service_yaml = go_service_yaml(name, port=8080)
  k8s_yaml(blob(deployment_yaml))
  k8s_yaml(blob(service_yaml))
  k8s_resource(name, port_forwards=port_forwards, resource_deps=resource_deps)

def set_env_variables(env_vars):
    env_str = ""
    for key, value in env_vars.items():
        env_str += """
            - name: %s
              value: %s
        """ % (key, value)
    return env_str


def go_deployment_yaml(name="app", env_vars={}):
    env_section = set_env_variables(env_vars)

    return """
apiVersion: apps/v1
kind: Deployment
metadata:
    name: %s
spec:
    replicas: 1
    selector:
        matchLabels:
            app: %s
    template:
        metadata:
            labels:
                app: %s
        spec:
            containers:
            - name: %s
              image: %s-image:latest
              env: %s
""" % (name, name, name, name, name, env_section)


def go_service_yaml(name="app", port=8080):
    return """
apiVersion: v1
kind: Service
metadata:
    name: %s
spec:
    selector:
        app: %s
    ports:
    - name: %s
      port: %s
      targetPort: %s
""" % (name, name, name, port, port)